{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"A debug toolbar for FastAPI based on the original django-debug-toolbar . Swagger UI & GraphQL are supported. Requirements Python 3.6+ Installation pip install fastapi-debug-toolbar Info The following packages are automatically installed: Jinja2 for toolbar templates. aiofiles to serve toolbar static files. pyinstrument for profiling support. Quickstart Add DebugToolbarMiddleware middleware to your FastAPI application: from debug_toolbar.middleware import DebugToolbarMiddleware from fastapi import FastAPI app = FastAPI ( debug = True ) app . add_middleware ( DebugToolbarMiddleware ) How it works Once installed, the debug toolbar tab is displayed on the right side of any html page, just click on it to open the navbar. The debug toolbar can be used with Swagger UI or GraphiQL and it is automatically updated after any request using a cookie-based system.","title":"Introduction"},{"location":"#requirements","text":"Python 3.6+","title":"Requirements"},{"location":"#installation","text":"pip install fastapi-debug-toolbar Info The following packages are automatically installed: Jinja2 for toolbar templates. aiofiles to serve toolbar static files. pyinstrument for profiling support.","title":"Installation"},{"location":"#quickstart","text":"Add DebugToolbarMiddleware middleware to your FastAPI application: from debug_toolbar.middleware import DebugToolbarMiddleware from fastapi import FastAPI app = FastAPI ( debug = True ) app . add_middleware ( DebugToolbarMiddleware )","title":"Quickstart"},{"location":"#how-it-works","text":"Once installed, the debug toolbar tab is displayed on the right side of any html page, just click on it to open the navbar. The debug toolbar can be used with Swagger UI or GraphiQL and it is automatically updated after any request using a cookie-based system.","title":"How it works"},{"location":"changelog/","text":"Changelog 0.2.1 Added PydanticPanel Removed current_thread in favor of get_ident Added anyio task groups Removed get_running_loop in favor of get_event_loop Improved tables styles 0.2.0 Fixed ThreadPoolExecutor for all sync endpoints Added cookie-based refresh Added exception handling for dependency resolution Added minor improvements to VersionPanel 0.1.3 Added TortoisePanel 0.1.2 Removed SQL compiled query in favor of statement params Added SQLAlchemy unregister Added SQLPanel base class 0.1.1 Improved dependency resolution Added minor improvements 0.1.0 Added SQLAlchemyPanel Added LOGGING_COLORS to panel templates Minor improvements 0.0.6 Improved VersionsPanel script Added docs 0.0.5 Fixed multiple profilers on the same thread Fixed VersionsPanel Pypi url 0.0.4 Added pypi details to VersionsPanel Improved assets Added LOGGING_COLORS Highlighted matched endpoint 0.0.3 Sorted routes by path 0.0.2 Added mounted apps support (e.g. ariadne.asgi.GraphQL) 0.0.1 \ud83d\udce6","title":"Changelog"},{"location":"changelog/#changelog","text":"","title":"Changelog"},{"location":"changelog/#021","text":"Added PydanticPanel Removed current_thread in favor of get_ident Added anyio task groups Removed get_running_loop in favor of get_event_loop Improved tables styles","title":"0.2.1"},{"location":"changelog/#020","text":"Fixed ThreadPoolExecutor for all sync endpoints Added cookie-based refresh Added exception handling for dependency resolution Added minor improvements to VersionPanel","title":"0.2.0"},{"location":"changelog/#013","text":"Added TortoisePanel","title":"0.1.3"},{"location":"changelog/#012","text":"Removed SQL compiled query in favor of statement params Added SQLAlchemy unregister Added SQLPanel base class","title":"0.1.2"},{"location":"changelog/#011","text":"Improved dependency resolution Added minor improvements","title":"0.1.1"},{"location":"changelog/#010","text":"Added SQLAlchemyPanel Added LOGGING_COLORS to panel templates Minor improvements","title":"0.1.0"},{"location":"changelog/#006","text":"Improved VersionsPanel script Added docs","title":"0.0.6"},{"location":"changelog/#005","text":"Fixed multiple profilers on the same thread Fixed VersionsPanel Pypi url","title":"0.0.5"},{"location":"changelog/#004","text":"Added pypi details to VersionsPanel Improved assets Added LOGGING_COLORS Highlighted matched endpoint","title":"0.0.4"},{"location":"changelog/#003","text":"Sorted routes by path","title":"0.0.3"},{"location":"changelog/#002","text":"Added mounted apps support (e.g. ariadne.asgi.GraphQL)","title":"0.0.2"},{"location":"changelog/#001","text":"\ud83d\udce6","title":"0.0.1"},{"location":"settings/","text":"Here's a list of settings available: ALLOWED_IPS : Sequence [ pydantic . networks . IPvAnyAddress ] pydantic-field If it's set, the Debug Toolbar is shown only if your IP address is listed. API_URL : str pydantic-field URL prefix to use for toolbar endpoints. DEFAULT_PANELS : List [ str ] pydantic-field Specifies the full Python path to each panel that you want included in the toolbar. DISABLE_PANELS : Sequence [ str ] pydantic-field A list of the full Python paths to each panel that you want disabled (but still displayed) by default. INSERT_BEFORE : str pydantic-field The toolbar searches for this string in the HTML and inserts itself just before. JINJA_ENV : Environment pydantic-field The Jinja environment instance used to render the toolbar. JINJA_EXTENSIONS : Sequence [ Union [ str , Type [ jinja2 . ext . Extension ]]] pydantic-field Load the extensions from the list and bind them to the Jinja environment. JINJA_LOADERS : List [ jinja2 . loaders . BaseLoader ] pydantic-field Jinja BaseLoader subclasses used to load templates from the file system or other locations. LOGGING_COLORS : Dict [ str , pydantic . color . Color ] pydantic-field Color palette used to apply colors based on the log level. PANELS : List [ str ] pydantic-field A list of the full Python paths to each panel that you want to append to DEFAULT_PANELS . PROFILER_OPTIONS : Dict [ str , Any ] pydantic-field A list of arguments can be supplied to the Profiler. RESULTS_CACHE_SIZE : int pydantic-field The toolbar keeps up to this many results in memory. ROOT_TAG_EXTRA_ATTRS : str pydantic-field This setting is injected in the root template div in order to avoid conflicts with client-side frameworks SETTINGS : Sequence [ pydantic . env_settings . BaseSettings ] pydantic-field pydantic's BaseSettings instances to be displayed on the SettingsPanel . SHOW_COLLAPSE : bool pydantic-field If changed to True , the toolbar will be collapsed by default. SHOW_TOOLBAR_CALLBACK : str pydantic-field This is the dotted path to a function used for determining whether the toolbar should show or not. SQL_WARNING_THRESHOLD : int pydantic-field The SQL panel highlights queries that took more that this amount of time, in milliseconds, to execute. STATIC_URL : str pydantic-field URL to use when referring to toolbar static files.","title":"Settings"},{"location":"settings/#debug_toolbar.settings.DebugToolbarSettings.ALLOWED_IPS","text":"If it's set, the Debug Toolbar is shown only if your IP address is listed.","title":"ALLOWED_IPS"},{"location":"settings/#debug_toolbar.settings.DebugToolbarSettings.API_URL","text":"URL prefix to use for toolbar endpoints.","title":"API_URL"},{"location":"settings/#debug_toolbar.settings.DebugToolbarSettings.DEFAULT_PANELS","text":"Specifies the full Python path to each panel that you want included in the toolbar.","title":"DEFAULT_PANELS"},{"location":"settings/#debug_toolbar.settings.DebugToolbarSettings.DISABLE_PANELS","text":"A list of the full Python paths to each panel that you want disabled (but still displayed) by default.","title":"DISABLE_PANELS"},{"location":"settings/#debug_toolbar.settings.DebugToolbarSettings.INSERT_BEFORE","text":"The toolbar searches for this string in the HTML and inserts itself just before.","title":"INSERT_BEFORE"},{"location":"settings/#debug_toolbar.settings.DebugToolbarSettings.JINJA_ENV","text":"The Jinja environment instance used to render the toolbar.","title":"JINJA_ENV"},{"location":"settings/#debug_toolbar.settings.DebugToolbarSettings.JINJA_EXTENSIONS","text":"Load the extensions from the list and bind them to the Jinja environment.","title":"JINJA_EXTENSIONS"},{"location":"settings/#debug_toolbar.settings.DebugToolbarSettings.JINJA_LOADERS","text":"Jinja BaseLoader subclasses used to load templates from the file system or other locations.","title":"JINJA_LOADERS"},{"location":"settings/#debug_toolbar.settings.DebugToolbarSettings.LOGGING_COLORS","text":"Color palette used to apply colors based on the log level.","title":"LOGGING_COLORS"},{"location":"settings/#debug_toolbar.settings.DebugToolbarSettings.PANELS","text":"A list of the full Python paths to each panel that you want to append to DEFAULT_PANELS .","title":"PANELS"},{"location":"settings/#debug_toolbar.settings.DebugToolbarSettings.PROFILER_OPTIONS","text":"A list of arguments can be supplied to the Profiler.","title":"PROFILER_OPTIONS"},{"location":"settings/#debug_toolbar.settings.DebugToolbarSettings.RESULTS_CACHE_SIZE","text":"The toolbar keeps up to this many results in memory.","title":"RESULTS_CACHE_SIZE"},{"location":"settings/#debug_toolbar.settings.DebugToolbarSettings.ROOT_TAG_EXTRA_ATTRS","text":"This setting is injected in the root template div in order to avoid conflicts with client-side frameworks","title":"ROOT_TAG_EXTRA_ATTRS"},{"location":"settings/#debug_toolbar.settings.DebugToolbarSettings.SETTINGS","text":"pydantic's BaseSettings instances to be displayed on the SettingsPanel .","title":"SETTINGS"},{"location":"settings/#debug_toolbar.settings.DebugToolbarSettings.SHOW_COLLAPSE","text":"If changed to True , the toolbar will be collapsed by default.","title":"SHOW_COLLAPSE"},{"location":"settings/#debug_toolbar.settings.DebugToolbarSettings.SHOW_TOOLBAR_CALLBACK","text":"This is the dotted path to a function used for determining whether the toolbar should show or not.","title":"SHOW_TOOLBAR_CALLBACK"},{"location":"settings/#debug_toolbar.settings.DebugToolbarSettings.SQL_WARNING_THRESHOLD","text":"The SQL panel highlights queries that took more that this amount of time, in milliseconds, to execute.","title":"SQL_WARNING_THRESHOLD"},{"location":"settings/#debug_toolbar.settings.DebugToolbarSettings.STATIC_URL","text":"URL to use when referring to toolbar static files.","title":"STATIC_URL"},{"location":"panels/default/","text":"Here's a list of default panels available: Versions Timer Settings Add your pydantic's BaseSettings classes to this panel: from debug_toolbar.middleware import DebugToolbarMiddleware from fastapi import FastAPI from pydantic import BaseSettings , SecretStr class APISettings ( BaseSettings ): SECRET_KEY : SecretStr app = FastAPI ( debug = True ) app . add_middleware ( DebugToolbarMiddleware , settings = [ APISettings ()]) Request Headers Pydantic Routes Logging Profiling Profiling reports provided by Pyinstrument , you can configure the profiler parameters by adding profiler_options settings: from debug_toolbar.middleware import DebugToolbarMiddleware from fastapi import FastAPI app = FastAPI ( debug = True ) app . add_middleware ( DebugToolbarMiddleware , profiler_options = { 'interval' : .0002 })","title":"Default panels"},{"location":"panels/default/#versions","text":"","title":"Versions"},{"location":"panels/default/#timer","text":"","title":"Timer"},{"location":"panels/default/#settings","text":"Add your pydantic's BaseSettings classes to this panel: from debug_toolbar.middleware import DebugToolbarMiddleware from fastapi import FastAPI from pydantic import BaseSettings , SecretStr class APISettings ( BaseSettings ): SECRET_KEY : SecretStr app = FastAPI ( debug = True ) app . add_middleware ( DebugToolbarMiddleware , settings = [ APISettings ()])","title":"Settings"},{"location":"panels/default/#request","text":"","title":"Request"},{"location":"panels/default/#headers","text":"","title":"Headers"},{"location":"panels/default/#pydantic","text":"","title":"Pydantic"},{"location":"panels/default/#routes","text":"","title":"Routes"},{"location":"panels/default/#logging","text":"","title":"Logging"},{"location":"panels/default/#profiling","text":"Profiling reports provided by Pyinstrument , you can configure the profiler parameters by adding profiler_options settings: from debug_toolbar.middleware import DebugToolbarMiddleware from fastapi import FastAPI app = FastAPI ( debug = True ) app . add_middleware ( DebugToolbarMiddleware , profiler_options = { 'interval' : .0002 })","title":"Profiling"},{"location":"panels/dev/","text":"First steps Before writing your own panel you need to provide a Jinja loader instance used to load your templates from the file system or other locations. from debug_toolbar.middleware import DebugToolbarMiddleware from fastapi import FastAPI from fastapi.templating import Jinja2Templates app = FastAPI ( debug = True ) templates = Jinja2Templates ( directory = \"templates\" ) app . add_middleware ( DebugToolbarMiddleware , panels = [ \"panels.ExamplePanel\" ], jinja_loaders = [ templates . env . loader ], ) Create a panel Subclass Panel and override generate_stats() method to implement a custom panel on your panels.py . This method should return a dict with the panel stats. from debug_toolbar.panels import Panel class ExamplePanel ( Panel ): title = \"Example Panel\" template = \"example.html\" async def process_request ( self , request ): response = await super () . process_request ( request ) return response async def generate_stats ( self , request , response ): return { \"example\" : \"value\" } Tip The process_request() method is optional and particularly useful for adding behavior that occurs before the request is processed. Please see the Panel class reference for further details. Writing the template Create a template at templates/example.html to display your panel stats: < span > {{ example }} </ span >","title":"Development"},{"location":"panels/dev/#first-steps","text":"Before writing your own panel you need to provide a Jinja loader instance used to load your templates from the file system or other locations. from debug_toolbar.middleware import DebugToolbarMiddleware from fastapi import FastAPI from fastapi.templating import Jinja2Templates app = FastAPI ( debug = True ) templates = Jinja2Templates ( directory = \"templates\" ) app . add_middleware ( DebugToolbarMiddleware , panels = [ \"panels.ExamplePanel\" ], jinja_loaders = [ templates . env . loader ], )","title":"First steps"},{"location":"panels/dev/#create-a-panel","text":"Subclass Panel and override generate_stats() method to implement a custom panel on your panels.py . This method should return a dict with the panel stats. from debug_toolbar.panels import Panel class ExamplePanel ( Panel ): title = \"Example Panel\" template = \"example.html\" async def process_request ( self , request ): response = await super () . process_request ( request ) return response async def generate_stats ( self , request , response ): return { \"example\" : \"value\" } Tip The process_request() method is optional and particularly useful for adding behavior that occurs before the request is processed. Please see the Panel class reference for further details.","title":"Create a panel"},{"location":"panels/dev/#writing-the-template","text":"Create a template at templates/example.html to display your panel stats: < span > {{ example }} </ span >","title":"Writing the template"},{"location":"panels/doc/","text":"debug_toolbar.panels.Panel content : str property readonly enabled : bool property readonly has_content : bool nav_subtitle : str property readonly nav_title : str property readonly panel_id : str property readonly scripts : List [ str ] property readonly template : str property readonly title : str property readonly __init__ ( self , toolbar , call_next ) special Source code in debug_toolbar/panels/__init__.py def __init__ ( self , toolbar : \"DebugToolbar\" , call_next : RequestResponseEndpoint , ) -> None : self . toolbar = toolbar self . call_next = call_next generate_server_timing ( self , request , response ) async Source code in debug_toolbar/panels/__init__.py async def generate_server_timing ( self , request : Request , response : Response , ) -> ServerTiming : pass generate_stats ( self , request , response ) async Source code in debug_toolbar/panels/__init__.py async def generate_stats ( self , request : Request , response : Response ) -> Stats : pass get_server_timing_stats ( self ) Source code in debug_toolbar/panels/__init__.py def get_server_timing_stats ( self ) -> ServerTiming : return self . toolbar . server_timing_stats . get ( self . panel_id , []) get_stats ( self ) Source code in debug_toolbar/panels/__init__.py def get_stats ( self ) -> Stats : return self . toolbar . stats . get ( self . panel_id , {}) process_request ( self , request ) async Source code in debug_toolbar/panels/__init__.py async def process_request ( self , request : Request ) -> Response : return await self . call_next ( request ) record_server_timing ( self , request , response ) async Source code in debug_toolbar/panels/__init__.py async def record_server_timing ( self , request : Request , response : Response ) -> None : stats = await self . generate_server_timing ( request , response ) if stats is not None : st_stats = self . toolbar . server_timing_stats . setdefault ( self . panel_id , []) st_stats += list ( stats ) record_stats ( self , request , response ) async Source code in debug_toolbar/panels/__init__.py async def record_stats ( self , request : Request , response : Response ) -> None : stats = await self . generate_stats ( request , response ) if stats is not None : self . toolbar . stats . setdefault ( self . panel_id , {}) . update ( stats ) render ( self , ** context ) Source code in debug_toolbar/panels/__init__.py def render ( self , ** context : t . Any ) -> str : return self . toolbar . render ( self . template , ** context ) url_for ( self , name , ** path_params ) Source code in debug_toolbar/panels/__init__.py def url_for ( self , name : str , ** path_params : t . Any ) -> str : return self . toolbar . request . url_for ( name , ** path_params )","title":"::: debug_toolbar.panels.Panel"},{"location":"panels/doc/#debug_toolbar.panels.Panel","text":"","title":"Panel"},{"location":"panels/doc/#debug_toolbar.panels.Panel.content","text":"","title":"content"},{"location":"panels/doc/#debug_toolbar.panels.Panel.enabled","text":"","title":"enabled"},{"location":"panels/doc/#debug_toolbar.panels.Panel.has_content","text":"","title":"has_content"},{"location":"panels/doc/#debug_toolbar.panels.Panel.nav_subtitle","text":"","title":"nav_subtitle"},{"location":"panels/doc/#debug_toolbar.panels.Panel.nav_title","text":"","title":"nav_title"},{"location":"panels/doc/#debug_toolbar.panels.Panel.panel_id","text":"","title":"panel_id"},{"location":"panels/doc/#debug_toolbar.panels.Panel.scripts","text":"","title":"scripts"},{"location":"panels/doc/#debug_toolbar.panels.Panel.template","text":"","title":"template"},{"location":"panels/doc/#debug_toolbar.panels.Panel.title","text":"","title":"title"},{"location":"panels/doc/#debug_toolbar.panels.Panel.__init__","text":"Source code in debug_toolbar/panels/__init__.py def __init__ ( self , toolbar : \"DebugToolbar\" , call_next : RequestResponseEndpoint , ) -> None : self . toolbar = toolbar self . call_next = call_next","title":"__init__()"},{"location":"panels/doc/#debug_toolbar.panels.Panel.generate_server_timing","text":"Source code in debug_toolbar/panels/__init__.py async def generate_server_timing ( self , request : Request , response : Response , ) -> ServerTiming : pass","title":"generate_server_timing()"},{"location":"panels/doc/#debug_toolbar.panels.Panel.generate_stats","text":"Source code in debug_toolbar/panels/__init__.py async def generate_stats ( self , request : Request , response : Response ) -> Stats : pass","title":"generate_stats()"},{"location":"panels/doc/#debug_toolbar.panels.Panel.get_server_timing_stats","text":"Source code in debug_toolbar/panels/__init__.py def get_server_timing_stats ( self ) -> ServerTiming : return self . toolbar . server_timing_stats . get ( self . panel_id , [])","title":"get_server_timing_stats()"},{"location":"panels/doc/#debug_toolbar.panels.Panel.get_stats","text":"Source code in debug_toolbar/panels/__init__.py def get_stats ( self ) -> Stats : return self . toolbar . stats . get ( self . panel_id , {})","title":"get_stats()"},{"location":"panels/doc/#debug_toolbar.panels.Panel.process_request","text":"Source code in debug_toolbar/panels/__init__.py async def process_request ( self , request : Request ) -> Response : return await self . call_next ( request )","title":"process_request()"},{"location":"panels/doc/#debug_toolbar.panels.Panel.record_server_timing","text":"Source code in debug_toolbar/panels/__init__.py async def record_server_timing ( self , request : Request , response : Response ) -> None : stats = await self . generate_server_timing ( request , response ) if stats is not None : st_stats = self . toolbar . server_timing_stats . setdefault ( self . panel_id , []) st_stats += list ( stats )","title":"record_server_timing()"},{"location":"panels/doc/#debug_toolbar.panels.Panel.record_stats","text":"Source code in debug_toolbar/panels/__init__.py async def record_stats ( self , request : Request , response : Response ) -> None : stats = await self . generate_stats ( request , response ) if stats is not None : self . toolbar . stats . setdefault ( self . panel_id , {}) . update ( stats )","title":"record_stats()"},{"location":"panels/doc/#debug_toolbar.panels.Panel.render","text":"Source code in debug_toolbar/panels/__init__.py def render ( self , ** context : t . Any ) -> str : return self . toolbar . render ( self . template , ** context )","title":"render()"},{"location":"panels/doc/#debug_toolbar.panels.Panel.url_for","text":"Source code in debug_toolbar/panels/__init__.py def url_for ( self , name : str , ** path_params : t . Any ) -> str : return self . toolbar . request . url_for ( name , ** path_params )","title":"url_for()"},{"location":"panels/sql/","text":"SQLAlchemy Please make sure to use the \"Dependency Injection\" system as described in the FastAPI docs and add the SQLAlchemyPanel to your panel list: from debug_toolbar.middleware import DebugToolbarMiddleware from fastapi import FastAPI app = FastAPI ( debug = True ) app . add_middleware ( DebugToolbarMiddleware , panels = [ \"debug_toolbar.panels.sqlalchemy.SQLAlchemyPanel\" ], ) Tortoise ORM Add the TortoisePanel to your panel list: from debug_toolbar.middleware import DebugToolbarMiddleware from fastapi import FastAPI app = FastAPI ( debug = True ) app . add_middleware ( DebugToolbarMiddleware , panels = [ \"debug_toolbar.panels.tortoise.TortoisePanel\" ], )","title":"SQL panels"},{"location":"panels/sql/#sqlalchemy","text":"Please make sure to use the \"Dependency Injection\" system as described in the FastAPI docs and add the SQLAlchemyPanel to your panel list: from debug_toolbar.middleware import DebugToolbarMiddleware from fastapi import FastAPI app = FastAPI ( debug = True ) app . add_middleware ( DebugToolbarMiddleware , panels = [ \"debug_toolbar.panels.sqlalchemy.SQLAlchemyPanel\" ], )","title":"SQLAlchemy"},{"location":"panels/sql/#tortoise-orm","text":"Add the TortoisePanel to your panel list: from debug_toolbar.middleware import DebugToolbarMiddleware from fastapi import FastAPI app = FastAPI ( debug = True ) app . add_middleware ( DebugToolbarMiddleware , panels = [ \"debug_toolbar.panels.tortoise.TortoisePanel\" ], )","title":"Tortoise ORM"}]}